import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';
import AsyncStorage from '@react-native-async-storage/async-storage';

// –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è API
export const API_BASE_URL = 'https://kpt.api.the-displaycontrol.com';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
export interface ApiResponse<T = any> {
  data: T;
  message?: string;
  success: boolean;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—à–∏–±–∫–∏ API
export interface ApiError {
  message: string;
  status: number;
  data?: any;
}

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è axios
const createApiClient = (): AxiosInstance => {
  const client = axios.create({
    baseURL: API_BASE_URL,
    timeout: 10000,
    headers: {
      'Content-Type': 'application/json',
    },
  });

  // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  client.interceptors.request.use(
    async (config) => {
      try {
        console.log(`üåê HTTP ${config.method?.toUpperCase()} ${config.url}`, {
          baseURL: config.baseURL,
          data: config.data,
          headers: config.headers
        });
        const token = await AsyncStorage.getItem('auth_token');
        if (token) {
          config.headers.Authorization = `Bearer ${token}`;
          console.log('üîë –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
        } else {
          console.log('‚ö†Ô∏è –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }
      } catch (error) {
        console.warn('Failed to get auth token:', error);
      }
      return config;
    },
    (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
      return Promise.reject(error);
    }
  );

  // –ò–Ω—Ç–µ—Ä—Ü–µ–ø—Ç–æ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤ - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
  client.interceptors.response.use(
    (response: AxiosResponse) => {
      console.log(`‚úÖ HTTP ${response.config.method?.toUpperCase()} ${response.config.url} - ${response.status}`, {
        data: response.data
      });
      return response;
    },
    async (error) => {
      console.error(`‚ùå HTTP ${error.config?.method?.toUpperCase()} ${error.config?.url} - ${error.response?.status || 'NETWORK_ERROR'}`, {
        error: error.response?.data || error.message,
        status: error.response?.status
      });

      const apiError: ApiError = {
        message: error.response?.data?.message || error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞',
        status: error.response?.status || 500,
        data: error.response?.data,
      };

      // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ª–æ–≥–∏–Ω
      if (error.response?.status === 401) {
        console.log('üîí –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –æ—á–∏—â–∞–µ–º...');
        try {
          await AsyncStorage.removeItem('auth_token');
          // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω –ª–æ–≥–∏–Ω–∞
        } catch (storageError) {
          console.warn('Failed to remove auth token:', storageError);
        }
      }

      return Promise.reject(apiError);
    }
  );

  return client;
};

export const apiClient = createApiClient();

// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
export const apiUtils = {
  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  setAuthToken: async (token: string) => {
    try {
      await AsyncStorage.setItem('auth_token', token);
    } catch (error) {
      console.error('Failed to save auth token:', error);
    }
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  removeAuthToken: async () => {
    try {
      await AsyncStorage.removeItem('auth_token');
    } catch (error) {
      console.error('Failed to remove auth token:', error);
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
  getAuthToken: async (): Promise<string | null> => {
    try {
      return await AsyncStorage.getItem('auth_token');
    } catch (error) {
      console.error('Failed to get auth token:', error);
      return null;
    }
  },
};

