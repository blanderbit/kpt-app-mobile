import React, { useState, ReactNode, useEffect } from 'react';
import { AuthContext } from '@app/hooks/auth.hook';
import { useProfile } from '@app/hooks/profile.hook';
import { authService, apiUtils, setOnAuthRequired } from '@shared/services/api';

export const AuthProvider = ({ children }: { children: ReactNode }) => {
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [user, setUser] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const { refreshProfile, clearProfile } = useProfile();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    useEffect(() => {
        const checkAuthStatus = async () => {
            try {
                const hasTokens = await apiUtils.hasTokens();
                if (hasTokens) {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞, –ø–æ–ª—É—á–∞—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    try {
                        const userData = await authService.getCurrentUser();
                        setUser(userData);
                        setIsAuthenticated(true);
                        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        await refreshProfile();
                    } catch (error) {
                        // –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ
                        await apiUtils.removeAuthTokens();
                        setIsAuthenticated(false);
                        setUser(null);
                        await clearProfile();
                    }
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error);
            } finally {
                setIsLoading(false);
            }
        };

        checkAuthStatus();
    }, []);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞
    useEffect(() => {
        const handleAuthRequired = () => {
            console.log('üîî –ü–æ–ª—É—á–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ª–æ–≥–∏–Ω–∞');
            setIsAuthenticated(false);
            setUser(null);
            clearProfile();
        };

        setOnAuthRequired(handleAuthRequired);

        // –û—á–∏—â–∞–µ–º callback –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        return () => {
            setOnAuthRequired(null);
        };
    }, [clearProfile]);

    const login = async (email: string, password: string) => {
        try {
            console.log('üîê –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞...', { email });
            setIsLoading(true);
            setError(null);

            // –í—ã–∑—ã–≤–∞–µ–º API –ª–æ–≥–∏–Ω–∞
            console.log('üì° –í—ã–∑—ã–≤–∞–µ–º authService.login...');
            const response = await authService.login({ email, password });
            console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', response);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã...');
            await apiUtils.setAuthTokens(response.accessToken, response.refreshToken);
            console.log('‚úÖ –¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ...');
            setUser(response.user);
            setIsAuthenticated(true);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
            await refreshProfile();
            console.log('‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error: any) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
            const errorMessage = error.message || '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É';
            setError(errorMessage);
            throw new Error(errorMessage);
        } finally {
            setIsLoading(false);
        }
    };

    const logout = async () => {
        try {
            setIsLoading(true);
            
            // –í—ã–∑—ã–≤–∞–µ–º API –≤—ã—Ö–æ–¥–∞
            await authService.logout();
            
            // –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω—ã
            await apiUtils.removeAuthTokens();
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setIsAuthenticated(false);
            setUser(null);
            setError(null);
            // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            await clearProfile();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
            // –î–∞–∂–µ –µ—Å–ª–∏ API –≤—ã–∑–æ–≤ –Ω–µ —É–¥–∞–ª—Å—è, –æ—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await apiUtils.removeAuthTokens();
            setIsAuthenticated(false);
            setUser(null);
            await clearProfile();
        } finally {
            setIsLoading(false);
        }
    };

    return (
        <AuthContext.Provider value={{ 
            isAuthenticated, 
            user, 
            isLoading, 
            login, 
            logout, 
            error 
        }}>
            {children}
        </AuthContext.Provider>
    );
};
