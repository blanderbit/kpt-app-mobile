import React, { useState, ReactNode, useEffect } from 'react';
import { ProfileContext } from '@app/hooks/profile.hook';
import { authService } from '@shared/services/api';
import AsyncStorage from '@react-native-async-storage/async-storage';

const PROFILE_STORAGE_KEY = 'user_profile';

export const ProfileProvider = ({ children }: { children: ReactNode }) => {
    const [profile, setProfile] = useState(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ AsyncStorage –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    useEffect(() => {
        loadProfileFromStorage();
    }, []);

    const loadProfileFromStorage = async () => {
        try {
            console.log('üì± –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ AsyncStorage...');
            const storedProfile = await AsyncStorage.getItem(PROFILE_STORAGE_KEY);
            if (storedProfile) {
                const parsedProfile = JSON.parse(storedProfile);
                setProfile(parsedProfile);
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ AsyncStorage:', parsedProfile.firstName);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ AsyncStorage:', error);
        } finally {
            setIsLoading(false);
        }
    };

    const saveProfileToStorage = async (profileData: any) => {
        try {
            console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ AsyncStorage...');
            await AsyncStorage.setItem(PROFILE_STORAGE_KEY, JSON.stringify(profileData));
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ AsyncStorage');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –≤ AsyncStorage:', error);
        }
    };

    const refreshProfile = async () => {
        try {
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞...');
            setIsLoading(true);
            setError(null);

            const profileData = await authService.getCurrentUser();
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞:', profileData.firstName);
            
            setProfile(profileData);
            await saveProfileToStorage(profileData);
        } catch (error: any) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
            setError(error.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è');
        } finally {
            setIsLoading(false);
        }
    };

    const updateProfile = (profileData: any) => {
        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ...');
        setProfile(profileData);
        saveProfileToStorage(profileData);
    };

    const clearProfile = async () => {
        try {
            console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å...');
            setProfile(null);
            setError(null);
            await AsyncStorage.removeItem(PROFILE_STORAGE_KEY);
            console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—â–µ–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è:', error);
        }
    };

    return (
        <ProfileContext.Provider value={{ 
            profile, 
            isLoading, 
            error, 
            refreshProfile, 
            updateProfile, 
            clearProfile 
        }}>
            {children}
        </ProfileContext.Provider>
    );
};
